[
  {
    "title": "hacktool_windows_mimikatz_files",
    "description": "Mimikatz credential dump tool: Files",
    "platform": "YARA",
    "query": "rule hacktool_windows_mimikatz_files\n{\n    meta:\n        description = \"Mimikatz credential dump tool: Files\"\n        reference = \"https://github.com/gentilkiwi/mimikatz\"\n        author = \"@fusionrace\"\n        md5_1 = \"09054be3cc568f57321be32e769ae3ccaf21653e5d1e3db85b5af4421c200669\"\n        md5_2 = \"004c07dcd04b4e81f73aacd99c7351337f894e4dac6c91dcfaadb4a1510a967c\"\n    strings:\n        $s1 = \"kiwifilter.log\" fullword wide\n        $s2 = \"kiwissp.log\" fullword wide\n        $s3 = \"mimilib.dll\" fullword ascii wide\n    condition:\n        any of them\n}",
    "tags": "mimikatz, windows",
    "references": "https://github.com/gentilkiwi/mimikatz",
    "created_by": "brian",
    "date_added": "2025-07-30",
    "id": "hacktool-windows-mimikatz-files-20250730154725"
  },
  {
    "title": "gcti_tor_exit_nodes",
    "description": "Alert traffic destined for known Tor exit nodes",
    "platform": "Chronicle",
    "query": "rule gcti_tor_exit_nodes {\n\n  meta:\n    author = \"Google Cloud Security\"\n    description = \"Alert traffic destined for known Tor exit nodes\"\n    rule_id = \"mr_1d31f0e4-8cd9-4fc2-ae87-e91a435fe34f\"\n    rule_name = \"GCTI Tor Exit Nodes\"\n    tactic = \"TA0011\"\n    technique = \"T1090.003\"\n    type = \"alert\"\n    tags = \"tor\"\n    data_source = \"crowdstrike, microsoft sysmon, microsoft defender atp\"\n    severity = \"High\"\n    priority = \"High\"\n\n  events:\n    $network.metadata.event_type = \"NETWORK_CONNECTION\"\n    $network.security_result.action = \"ALLOW\"\n    $network.target.ip = $ip\n\n    // Tor IP listing provided by GCTI Feed\n    $gcti_feed.graph.entity.artifact.ip = $ip\n    $gcti_feed.graph.metadata.entity_type = \"IP_ADDRESS\"\n    $gcti_feed.graph.metadata.threat.threat_feed_name = \"Tor Exit Nodes\"\n    $gcti_feed.graph.metadata.product_name = \"GCTI Feed\"\n    $gcti_feed.graph.metadata.source_type = \"GLOBAL_CONTEXT\"\n\n  match:\n    $ip over 1h\n\n  outcome:\n    $risk_score = 85\n    $event_count = count_distinct($network.metadata.id)\n    $tor_geoip_country = array_distinct($network.target.ip_geo_artifact.location.country_or_region)\n    $tor_geoip_state = array_distinct($network.target.ip_geo_artifact.location.state)\n    // added to populate alert graph with additional context\n    $principal_ip = array_distinct($network.principal.ip)\n    // Commented out target.ip because it is already represented in graph as match variable. If match changes, can uncomment to add to results\n    //$target_ip = array_distinct($network.target.ip)\n    $principal_process_pid = array_distinct($network.principal.process.pid)\n    $principal_process_command_line = array_distinct($network.principal.process.command_line)\n    $principal_process_file_sha256 = array_distinct($network.principal.process.file.sha256)\n    $principal_process_file_full_path = array_distinct($network.principal.process.file.full_path)\n    $principal_process_product_specific_process_id = array_distinct($network.principal.process.product_specific_process_id)\n    $principal_process_parent_process_product_specific_process_id = array_distinct($network.principal.process.parent_process.product_specific_process_id)\n    $target_process_pid = array_distinct($network.target.process.pid)\n    $target_process_command_line = array_distinct($network.target.process.command_line)\n    $target_process_file_sha256 = array_distinct($network.target.process.file.sha256)\n    $target_process_file_full_path = array_distinct($network.target.process.file.full_path)\n    //$target_process_product_specific_process_id = array_distinct($network.target.process.product_specific_process_id)\n    //$target_process_parent_process_product_specific_process_id = array_distinct($network.target.process.parent_process.product_specific_process_id)\n    $principal_user_userid = array_distinct($network.principal.user.userid)\n    $target_user_userid = array_distinct($network.target.user.userid)\n\n  condition:\n    $network and $gcti_feed\n}",
    "tags": "Tor, Network",
    "references": "https://github.com/chronicle/detection-rules/tree/main/rules/community/threat_intel",
    "created_by": "brian",
    "date_added": "2025-07-30",
    "id": "gcti-tor-exit-nodes-20250730154933"
  },
  {
    "title": "Decode Base64 Encoded Text -MacOs",
    "description": "Detects usage of base64 utility to decode arbitrary base64-encoded text",
    "platform": "Sigma",
    "query": "title: Decode Base64 Encoded Text -MacOs\nid: 719c22d7-c11a-4f2c-93a6-2cfdd5412f68\nstatus: test\ndescription: Detects usage of base64 utility to decode arbitrary base64-encoded text\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1027/T1027.md\nauthor: Daniil Yugoslavskiy, oscd.community\ndate: 2020-10-19\nmodified: 2022-11-26\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection:\n        Image: '/usr/bin/base64'\n        CommandLine|contains: '-d'\n    condition: selection\nfalsepositives:\n    - Legitimate activities\nlevel: low",
    "tags": "macos",
    "references": "https://github.com/SigmaHQ/sigma/tree/master/rules/macos/process_creation",
    "created_by": "brian",
    "date_added": "2025-07-30",
    "id": "decode-base64-encoded-text-macos-20250730155024"
  },
  {
    "title": "Amazon EKS Kubernetes cluster scan detection",
    "description": "The following analytic detects unauthenticated requests to an Amazon\n  EKS Kubernetes cluster, specifically identifying actions by the \"system:anonymous\"\n  user. It leverages AWS CloudWatch Logs data, focusing on user agents and authentication\n  details. This activity is significant as it may indicate unauthorized scanning or\n  probing of the Kubernetes cluster, which could be a precursor to an attack. If confirmed\n  malicious, this could lead to unauthorized access, data exfiltration, or disruption\n  of services within the Kubernetes environment.",
    "platform": "Splunk",
    "query": "name: Amazon EKS Kubernetes cluster scan detection\nid: 294c4686-63dd-4fe6-93a2-ca807626704a\nversion: 5\ndate: '2025-05-02'\nauthor: Rod Soto, Splunk\nstatus: experimental\ntype: Hunting\ndescription: The following analytic detects unauthenticated requests to an Amazon\n  EKS Kubernetes cluster, specifically identifying actions by the \"system:anonymous\"\n  user. It leverages AWS CloudWatch Logs data, focusing on user agents and authentication\n  details. This activity is significant as it may indicate unauthorized scanning or\n  probing of the Kubernetes cluster, which could be a precursor to an attack. If confirmed\n  malicious, this could lead to unauthorized access, data exfiltration, or disruption\n  of services within the Kubernetes environment.\ndata_source: []\nsearch: '`aws_cloudwatchlogs_eks` \"user.username\"=\"system:anonymous\" userAgent!=\"AWS\n  Security Scanner\" | rename sourceIPs{} as src_ip | stats count min(_time) as firstTime\n  max(_time) as lastTime values(responseStatus.reason) values(source) as cluster_name\n  values(responseStatus.code) values(userAgent) as http_user_agent values(verb) values(requestURI)\n  by src_ip user.username user.groups{} | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)`\n  |`amazon_eks_kubernetes_cluster_scan_detection_filter`'\nhow_to_implement: You must install the AWS App for Splunk (version 5.1.0 or later)\n  and Splunk Add-on for AWS (version 4.4.0 or later), then configure your CloudWatch\n  EKS Logs inputs.\nknown_false_positives: Not all unauthenticated requests are malicious, but frequency,\n  UA and source IPs will provide context.\nreferences: []\ntags:\n  analytic_story:\n  - Kubernetes Scanning Activity\n  asset_type: Amazon EKS Kubernetes cluster\n  mitre_attack_id:\n  - T1526\n  product:\n  - Splunk Enterprise\n  - Splunk Enterprise Security\n  - Splunk Cloud\n  security_domain: threat",
    "tags": "AWS, Kubernetes",
    "references": "https://github.com/splunk/security_content/tree/develop/detections/cloud",
    "created_by": "brian",
    "date_added": "2025-07-30",
    "id": "amazon-eks-kubernetes-cluster-scan-detection-20250730155138"
  },
  {
    "title": "Anomaly Sign In Event from an IP",
    "description": "Identifies sign-in anomalies from an IP in the last hour, targeting multiple users where the password is correct after multiple attempts",
    "platform": "Sentinel",
    "query": "id: 9c1e9381-79dd-4ddf-9570-b73a1dc59fe0\nname: Anomaly Sign In Event from an IP\ndescription: |\n  'Identifies sign-in anomalies from an IP in the last hour, targeting multiple users where the password is correct after multiple attempts'\nseverity: Medium\nrequiredDataConnectors:\n  - connectorId: AzureActiveDirectory\n    dataTypes:\n      - SigninLogs \nqueryFrequency: 1h\nqueryPeriod: 1h\ntriggerOperator: gt\ntriggerThreshold: 0\ntactics:\n  - InitialAccess\nrelevantTechniques:\n  - T1078\nquery: |\n  let LookBack = 1h;\n  let Data = (\n  SigninLogs\n  | where TimeGenerated >= ago(LookBack)\n  | where parse_json(NetworkLocationDetails)[0].networkType != \"trustedNamedLocation\" // Excludes known tagged networks\n  // Counts the number of sign in events in the last hour every 15 minutes by IP\n  | make-series EventCounts = count() on TimeGenerated from ago(LookBack) to now() step 15m by IPAddress \n  );\n  let AnomalyAlert = (\n  Data\n  | extend (Anomalies, Score, Baseline) = series_decompose_anomalies(EventCounts,1.5,-1,'linefit')\n  | mv-expand EventCounts,TimeGenerated,Anomalies to typeof(double),Baseline to typeof(long),Score to typeof(double)\n  | where Anomalies > 0\n  );\n  AnomalyAlert\n  | join kind = inner (SigninLogs\n  | where TimeGenerated between (ago(LookBack) .. now())\n  | where parse_json(NetworkLocationDetails)[0].networkType != \"trustedNamedLocation\"\n  | extend PasswordResult = tostring(parse_json(AuthenticationDetails).authenticationStepResultDetail)\n  | summarize UserCount = dcount(UserPrincipalName), UserList = make_set(UserPrincipalName), AppName = make_set(AppDisplayName), PasswordResult = make_list(PasswordResult) by IPAddress) on IPAddress\n  | where PasswordResult has \"Correct Password\"\n  | where UserCount > 1 // looks for events targeting more than one user.\nentityMappings:\n  - entityType: IP\n    fieldMappings:\n      - identifier: Address\n        columnName: IPAddress\ncustomDetails:\n  Score: Score\n  Baseline: Baseline\n  UserCount: UserCount\n  AppName: AppName\n  PasswordResult: PasswordResult\n  UserList: UserList\nversion: 1.0.1\nkind: Scheduled\nmetadata:\n    source:\n        kind: Community\n    author:\n        name: Juanse\n    support:\n        tier: Community\n    categories:\n        domains: [ \"Identity\" ]",
    "tags": "Azure, AD",
    "references": "https://github.com/Azure/Azure-Sentinel/tree/master/Detections/Anomalies",
    "created_by": "brian",
    "date_added": "2025-07-30",
    "id": "anomaly-sign-in-event-from-an-ip-20250730155242"
  },
  {
    "title": "Multiple Alerted Process Executions by Same Host",
    "description": "Detects Multiple Alerted Process Executions by Same Host",
    "platform": "CrowdStrike",
    "query": "#event_simpleName=ProcessRollup2\n| join({#event_simpleName=NetworkConnectIP4 LocalPort>1024 LocalPort!=0}, field=TargetProcessId, key=ContextProcessId)\n| stats count(aid, as=ConnCount) by ComputerName, FileName\n| filter ConnCount > 10",
    "tags": "",
    "references": "",
    "created_by": "brian",
    "date_added": "2025-07-30",
    "id": "multiple-alerted-process-executions-by-same-host-20250730155637"
  },
  {
    "title": "Network and Port Scanning",
    "description": "Detect Network and Port Scanning",
    "platform": "Splunk",
    "query": "index=* sourcetype=firewall*\n| stats dc(dest_port) as num_dest_port dc(dest_ip) as num_dest_ip by src_ip\n| where num_dest_port >500 OR num_dest_ip > 500",
    "tags": "network",
    "references": "",
    "created_by": "brian",
    "date_added": "2025-07-30",
    "id": "network-and-port-scanning-20250730161310"
  }
]